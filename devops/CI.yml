trigger: none

pr:
- main

jobs:
- job: 
  displayName: Linux

  pool:
    vmImage: ubuntu-20.04

  timeoutInMinutes: 60

  strategy:
    matrix:
      Release:
        BuildType: Release
        Systematic: Off
      Debug:
        BuildType: Debug
        Systematic: Off
      Release-Systematic:
        BuildType: Release
        Systematic: On
      Debug-Systematic:
        BuildType: Debug
        Systematic: On

  steps:
  - checkout: self
    submodules: true

  - script: |
      set -eo pipefail
      sudo apt-get update
      sudo apt-get install -y ninja-build nasm
      sudo apt-get install -y clang-format-9
      sudo apt-get install qemu-system
      sudo apt-get remove --purge cmake
      sudo snap install cmake --classic
    displayName: 'Dependencies'

  - script: echo $AZURE_DEVOPS_CLI_PAT | az devops login --organization https://dev.azure.com/msr-gryffindor
    env:
      AZURE_DEVOPS_CLI_PAT: $(System.Access)
    displayName: 'Login Azure DevOps Extension'

  - script: ./apply-guest-patches.sh
    displayName: Patch externals
    workingDirectory: external

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        .. -GNinja -DCMAKE_BUILD_TYPE=$(BuildType) -DMONZA_DOWNLOAD_LLVM=0.0.16 -DMONZA_SYSTEMATIC_BUILD=$(Systematic)

  - script: |
      set -eo pipefail
      ninja external
    workingDirectory: build
    displayName: 'Compile externals'

  - script: |
      set -eo pipefail
      ninja
    workingDirectory: build
    displayName: 'Compile'

  - script: |
      set -eo pipefail
      CTEST_OUTPUT_ON_FAILURE=ON ninja guest-verona-rt-test
    workingDirectory: build
    displayName: 'Tests'

  - task: ComponentGovernanceComponentDetection@0
    inputs:
      ignoreDirectories: 'external/llvm-project/mlir,external/llvm-project/lldb,external/llvm-project/utils,external/llvm-project/clang/utils,external/llvm-project/libcxx/utils,external/llvm-project/llvm/utils'
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'

############################################## Clang Format Check
- job: 
  displayName: Format
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - checkout: self

  - script: |
      set -eo pipefail
      sudo apt-get update
      sudo apt-get install -y ninja-build nasm
      sudo apt-get install -y clang-format-9
    displayName: 'Install Clang tools'
  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        ..
  - script: |
      set -eo pipefail
      make clangformat
      git diff --ignore-submodules=dirty --exit-code $(Build.SourceVersion)
    workingDirectory: build
    displayName: 'Clang-Format'

  - script: |
      set -eo pipefail
      make copyright
    workingDirectory: build
    displayName: 'Check Copyright and License'
